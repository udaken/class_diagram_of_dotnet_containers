@startuml Class Diagram of .NET's Containers
left to right direction
hide empty members

skinparam StereotypeCBackgroundColor<< struct >> Orange
'skinparam groupInheritance 3

package System.Collections.Generic {
    interface IEnumerable<T>
    interface IList<T>
    interface IReadOnlyList<T>
}

package System {
    abstract class Array
    class "T[]"<T> extends Array implements IList, IReadOnlyList
    class ArraySegment<T> << struct >> implements IList, IReadOnlyList
    ArraySegment *-up- "T[]"
    together {
        class Span<T>  << struct >>
        class ReadOnlySpan<T>  << struct >>
    }
    together {
        class Memory<T>  << struct >>
        class ReadOnlyMemory<T>  << struct >>
    }
    ReadOnlyMemory *-- String
    ReadOnlyMemory *-- "T[]"
    Memory *-- "T[]"

    class String implements IEnumerable
}
together {
    class stackalloc as "stackalloc'ed region"
    class unsafePointer as "void*"

    Span *-- stackalloc
    Span *-- unsafePointer
    Span -- Memory
    Span *-- "T[]"

    ReadOnlySpan *-- stackalloc
    ReadOnlySpan *-- unsafePointer
    ReadOnlySpan -- ReadOnlyMemory
    ReadOnlySpan *-- String
    ReadOnlySpan *-- "T[]"
}

package System.Numerics {
    class Vector<T> << struct >>
}
Vector *-- "T[]"

package System.Collections.Generic {
    interface IEnumerable<out T>
    interface ICollection<T> extends  IEnumerable
    interface IReadOnlyCollection<out T> extends IEnumerable
    together {
        interface IList<T> extends ICollection
        interface IReadOnlyList<out T> extends IReadOnlyCollection
        class List<T> implements IList, IReadOnlyList
    }
    together {
        interface ISet<T> extends ICollection
        interface IReadOnlySet<out T> extends IReadOnlyCollection
        class HashSet<T> implements ISet, IReadOnlySet
        class SortedSet<T> implements ISet, IReadOnlySet
        class TreeSet<T> extends SortedSet
    }
    together {
        interface IDictionary<TKey, TValue> extends ICollection
        interface IReadOnlyDictionary<TKey, TValue> extends IReadOnlyCollection
        class Dictionary<TKey, TValue> implements IDictionary, IReadOnlyDictionary
        class SortedDictionary<TKey, TValue> implements IDictionary, IReadOnlyDictionary
        class SortedList<TKey, TValue> implements IDictionary, IReadOnlyDictionary
    }
    class Stack<T> implements IReadOnlyCollection
    class Queue<T> implements IReadOnlyCollection
    class LinkedList<T> implements ICollection,IReadOnlyCollection

    List -[hidden]-> LinkedList
}

package System.Linq {
    interface IGrouping<out TKey, out TElement> extends IEnumerable
    class Grouping<TKey, TElement> implements IList, IGrouping
}
ICollection -[hidden]right-> IGrouping

package System.Collections.ObjectModel {
    class Collection<T> implements IList, IReadOnlyList
    class ReadOnlyCollection<T> implements IList, IReadOnlyList
    ReadOnlyCollection *-- IList
    class ObservableCollection<T> extends Collection
}

package System.Collections.Immutable {
    <> connector_IReadOnlyCollection
    IReadOnlyCollection -down- "IReadOnlyCollection" connector_IReadOnlyCollection

    <> connector_IList
    IList -down- "IList" connector_IList

    <> connector_IReadOnlyList
    IReadOnlyList -down- "IReadOnlyList" connector_IReadOnlyList

    <> connector_ISet
    ISet -down- "ISet" connector_ISet

    <> connector_IReadOnlySet
    IReadOnlySet -down- "IReadOnlySet" connector_IReadOnlySet

    <> connector_IDictionary
    IDictionary -down- "IDictionary" connector_IDictionary

    <> connector_IReadOnlyDictionary
    IReadOnlyDictionary -down- "IReadOnlyDictionary" connector_IReadOnlyDictionary

    connector_IReadOnlyCollection -[hidden]down- connector_IReadOnlyList
    connector_IReadOnlyList -[hidden]left- connector_IList
    connector_IList -[hidden]left- connector_ISet
    connector_ISet -[hidden]left- connector_IReadOnlyDictionary
    connector_IReadOnlyDictionary -[hidden]left- connector_IDictionary
    connector_IDictionary -[hidden]left- connector_IReadOnlySet

    together {
        interface IImmutableList<T> extends connector_IReadOnlyList
        class ImmutableList<T> implements connector_IList, IImmutableList
        class "ImmutableList.Builder"<T> implements connector_IList, connector_IReadOnlyList
    }
    ImmutableList -[hidden]-> "ImmutableList.Builder"

    together {
        interface IImmutableSet<T> extends connector_IReadOnlyCollection

        class ImmutableSortedSet<T> implements IImmutableSet, connector_ISet, connector_IReadOnlySet, connector_IList, connector_IReadOnlyList
        class "ImmutableSortedSet.Builder"<T> implements connector_IReadOnlyCollection, connector_ISet

        class ImmutableHashSet<T> implements IImmutableSet, connector_ISet, connector_IReadOnlySet, connector_IList, connector_IReadOnlyList
        class "ImmutableHashSet.Builder"<T> implements connector_IReadOnlyCollection, connector_ISet
    }
    ImmutableSortedSet -[hidden]-> "ImmutableSortedSet.Builder"
    ImmutableHashSet -[hidden]-> "ImmutableHashSet.Builder"

    together {
        interface IImmutableDictionary<TKey, TValue> extends connector_IReadOnlyDictionary
        class ImmutableDictionary<TKey, TValue> implements IImmutableDictionary, connector_IDictionary
        class "ImmutableDictionary.Builder"<TKey, TValue> implements connector_IDictionary, connector_IReadOnlyDictionary
    }
    IImmutableDictionary -[hidden]-> ImmutableDictionary
    ImmutableDictionary -[hidden]-> "ImmutableDictionary.Builder"

    together {
        interface IImmutableArray
        class ImmutableArray<T>  << struct >> implements IImmutableArray, IImmutableList

        class "ImmutableArray.Builder"<T> implements connector_IList, connector_IReadOnlyList
    }
    IImmutableArray -[hidden]-> ImmutableArray
    ImmutableArray -[hidden]-> "ImmutableArray.Builder"

    interface IImmutableQueue<T> extends IEnumerable
    class ImmutableQueue<T> implements IImmutableQueue

    interface IImmutableStack<T> extends IEnumerable
    class ImmutableStack<T> implements IImmutableStack

}

' System.Collections.Generic -[hidden]- System.Collections.Immutable

' IReadOnlyDictionary -[hidden]down-> IImmutableDictionary
' IReadOnlyList -[hidden]down-> IImmutableList
' IReadOnlySet -[hidden]down-> IImmutableSet

@enduml
